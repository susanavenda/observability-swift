---
kind: OpenTelemetryCollector
apiVersion: opentelemetry.io/v1beta1
metadata:
  name: app-to-kafka
  namespace: otel
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  managementState: managed
  mode: deployment
  serviceAccount: otel-collector
  resources:
    requests:
      cpu: 100m
      memory: 500Mi
    limits:
      cpu: 300m
      memory: 500Mi
  autoscaler:
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilization: 90
  observability:
    metrics:
      enableMetrics: true
  env:
    - name: KAFKA_USERNAME
      valueFrom:
        secretKeyRef:
          name: kafkauser-otel-credentials
          key: username
    - name: KAFKA_PASSWORD
      valueFrom:
        secretKeyRef:
          name: kafkauser-otel-credentials
          key: password
  config:

    extensions:
      bearertokenauth:
        filename: /var/run/secrets/kubernetes.io/serviceaccount/token

    # The Spanmetrics connector receives traces and exports metrics
    connectors:
      spanmetrics:
        metrics_flush_interval: 15s

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      k8sattributes: {}

    exporters:
      # https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/debugexporter/README.md
      debug:
        verbosity: normal # basic / normal / detailed

      # GRPC exporter to Tempo
      otlp/tempo:
        endpoint: tempo-tempo-gateway.openshift-tempo.svc.cluster.local:8090
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        auth:
          authenticator: bearertokenauth
        headers:
          X-Scope-OrgID: dev  # tenantName

      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/kafkaexporter/README.md
      kafka:
        brokers:
          - cluster-kafka-bootstrap.kafka:9095
        protocol_version: 3.9.0
        # topic_from_attribute: k8s.namespace.name
        topic: otlp.spans
        encoding: otlp_json
        auth:
          sasl:
            mechanism: SCRAM-SHA-512
            username: console
            password: password
            # username: ${env:KAFKA_USERNAME}
            # password: ${env:KAFKA_PASSWORD}
          tls:
            insecure: false
            insecure_skip_verify: true

      kafka/metrics:
        brokers:
          - cluster-kafka-bootstrap.kafka:9095
        protocol_version: 3.9.0
        # topic_from_attribute: k8s.namespace.name
        topic: otlp.metrics
        encoding: otlp_json
        auth:
          sasl:
            mechanism: SCRAM-SHA-512
            username: console
            password: password
            # username: ${env:KAFKA_USERNAME}
            # password: ${env:KAFKA_PASSWORD}
          tls:
            insecure: false
            insecure_skip_verify: true

      prometheus:
        add_metric_suffixes: false
        endpoint: 0.0.0.0:8889
        resource_to_telemetry_conversion:
          enabled: true # by default resource attributes are dropped

    service:
      extensions:
        - bearertokenauth
      pipelines:
        traces:
          receivers:
            - otlp
          processors:
            - k8sattributes
          exporters:
            - otlp/tempo
            - spanmetrics
            - debug
            - kafka
        metrics:
          receivers:
            - spanmetrics
          exporters:
            - kafka/metrics
      telemetry:
        # https://opentelemetry.io/docs/collector/internal-telemetry/#configure-internal-logs
        logs: # Getting the OpenTelemetry Collector logs
          encoding: json
          level: INFO # INFO / WARN / DEBUG
        metrics:
          level: normal # none / basic / normal / detailed
          # address: ""
          # readers:
          #   - pull:
          #       exporter:
          #         prometheus:
          #           host: '0.0.0.0'
          #           port: 8888
