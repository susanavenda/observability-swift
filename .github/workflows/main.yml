name: Build

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /var/lib/docker/image/overlay2
          key: ${{ runner.os }}-docker-${{ hashFiles('/var/lib/docker/image/overlay2/repositories.json') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Add hosts to /etc/hosts
        run: |
          sudo echo "127.0.0.1 kafka" | sudo tee -a /etc/hosts

      - name: Build with Maven
        run: mvn -B package verify sonar:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }} --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v6
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ianitrix/kafka-apm-example
          tag_with_ref: true

      - name: Compute archive file name
        id: fileName
        run: echo "::set-output name=archiveFileName::`ls target/*bin.tar.gz | cut -d'/' -f2`"

      - name: Compute version of release
        id: versionName
        run: echo "::set-output name=versionName::`echo ${{ steps.fileName.outputs.archiveFileName }} | cut -d'-' -f4`"

      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: v${{ steps.versionName.outputs.versionName }}
          draft: true
          prerelease: true

      - name: Upload Release Archive
        id: upload-release-asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/${{ steps.fileName.outputs.archiveFileName }}
          asset_name: ${{ steps.fileName.outputs.archiveFileName }}
          asset_content_type: application/gzip